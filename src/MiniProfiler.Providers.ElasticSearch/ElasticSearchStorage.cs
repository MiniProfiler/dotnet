using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Elasticsearch.Net;
using Nest;

namespace StackExchange.Profiling.Storage
{
    /// <summary>
    /// Understands how to store a <see cref="MiniProfiler"/> to a ElasticSearch database.
    /// </summary>
    public class ElasticSearchStorage : IAsyncStorage
    {
        private readonly string miniProfilerIndex;
        private readonly string connectionString;

        private ElasticClient _db;
        private ElasticClient Db
        {
            get
            {
                if (_db == null)
                {
                    //settings.EnableDebugMode(); // Activate when need to see query generated by NEST. (result.DebugInformation)
                    _db = new ElasticClient(new ConnectionSettings(new Uri(connectionString)).DefaultIndex(miniProfilerIndex.ToLowerInvariant()));
                }
                return _db;
            }
        }

        public ElasticSearchStorage()
        {
            connectionString = "http://localhost:9200";
            miniProfilerIndex = "miniprofiler";
        }

        /// <summary>
        /// Returns a new <see cref="ElasticSearchStorage"/>. ElasticSearch connection string will default to "http://localhost:9200"
        /// </summary>
        public ElasticSearchStorage(string connectionString)
            : this()
            => this.connectionString = connectionString;

        /// <summary>
        /// Returns a new <see cref="ElasticSearchStorage"/>. ElasticSearch connection string will default to "http://localhost:9200"
        /// </summary>
        public ElasticSearchStorage(string connectionString, string miniProfilerIndexName)
            : this(connectionString) => miniProfilerIndex = miniProfilerIndexName;

        public ElasticClient GetClient() => _db;

        public string IndexName => miniProfilerIndex;

        public void Save(MiniProfiler profiler)
        {
            var result = Db.Index(profiler, i => i.Index(miniProfilerIndex).Id(profiler.Id).Refresh(Refresh.True));
            if (!result.IsValid) Console.WriteLine($"WARN: Problem to save data. Message: {result.DebugInformation}");
        }

        public async Task SaveAsync(MiniProfiler profiler)
        {
            var result = await Db.IndexAsync(profiler, i => i.Index(miniProfilerIndex).Id(profiler.Id).Refresh(Refresh.True)).ConfigureAwait(false);
            if (!result.IsValid) Console.WriteLine($"WARN: Problem to save data. Message: {result.DebugInformation}");
        }

        public MiniProfiler Load(Guid id)
        {
            var find = Db.Get<MiniProfiler>(id, idx => idx.Index(miniProfilerIndex));
            if (!find.IsValid)
            {
                Console.WriteLine($"WARN: Problem to Load data. Message: {find.DebugInformation}");
                return null;
            }
            return find.Source;
        }

        public async Task<MiniProfiler> LoadAsync(Guid id)
        {
            var find = await Db.GetAsync<MiniProfiler>(id, idx => idx.Index(miniProfilerIndex)).ConfigureAwait(false);
            if (!find.IsValid)
            {
                Console.WriteLine($"WARN: Problem to Load data. Message: {find.DebugInformation}");
                return null;
            }
            return find.Source;
        }

        public void SetUnviewed(string user, Guid id)
        {
            var result = Db.UpdateByQuery<MiniProfiler>(u => u
                .Query(q => q
                    .Match(m => m
                        .Field(f => f.User)
                        .Query(user)
                    ) && q
                    .Match(m => m
                       .Field(f => f.Id)
                      .Query(id.ToString())
                    )
                )
                .Script("ctx._source.hasUserViewed = false")
                .Conflicts(Conflicts.Proceed)
                .Refresh(true)
            );
            if (!result.IsValid) Console.WriteLine($"WARN: Problem to set unviewed data. Message: {result.DebugInformation}");
        }

        public async Task SetUnviewedAsync(string user, Guid id)
        {
            var result = await Db.UpdateByQueryAsync<MiniProfiler>(u => u
                .Query(q => q
                    .Match(m => m
                        .Field(f => f.User)
                        .Query(user)
                    ) && q
                    .Match(m => m
                       .Field(f => f.Id)
                      .Query(id.ToString())
                    )
                )
                .Script("ctx._source.hasUserViewed = false")
                .Conflicts(Conflicts.Proceed)
                .Refresh(true)
            ).ConfigureAwait(false);
            if (!result.IsValid) Console.WriteLine($"WARN: Problem to set unviewed data. Message: {result.DebugInformation}");
        }

        public void SetViewed(string user, Guid id)
        {
            var result = Db.UpdateByQuery<MiniProfiler>(u => u
                .Query(q => q
                    .Match(m => m
                        .Field(f => f.User)
                        .Query(user)
                    ) && q
                    .Match(m => m
                       .Field(f => f.Id)
                      .Query(id.ToString())
                    )
                )
                .Script("ctx._source.hasUserViewed = true")
                .Conflicts(Conflicts.Proceed)
                .Refresh(true)
            );
            if (!result.IsValid) Console.WriteLine($"WARN: Problem to set viewed data. Message: {result.DebugInformation}");
        }

        public async Task SetViewedAsync(string user, Guid id)
        {
            var result = await Db.UpdateByQueryAsync<MiniProfiler>(u => u
                .Query(q => q
                    .Match(m => m
                        .Field(f => f.User)
                        .Query(user)
                    ) && q
                    .Match(m => m
                       .Field(f => f.Id)
                      .Query(id.ToString())
                    )
                )
                .Script("ctx._source.hasUserViewed = true")
                .Conflicts(Conflicts.Proceed)
                .Refresh(true)
            ).ConfigureAwait(false);
            if (!result.IsValid) Console.WriteLine($"WARN: Problem to set viewed data. Message: {result.DebugInformation}");
        }

        public List<Guid> GetUnviewedIds(string user)
        {
            var result = Db.Search<MiniProfiler>(s => GetUnviewedIdsQuery(user));
            if (!result.IsValid) return new List<Guid>();
            return result.Documents.Select(d => d.Id).ToList();
        }

        public async Task<List<Guid>> GetUnviewedIdsAsync(string user)
        {
            var result = await Db.SearchAsync<MiniProfiler>(s => GetUnviewedIdsQuery(user)).ConfigureAwait(false);
            if (!result.IsValid) return new List<Guid>();
            return result.Documents.Select(d => d.Id).ToList();
        }

        private static SearchDescriptor<MiniProfiler> GetUnviewedIdsQuery(string user)
        {
            return new SearchDescriptor<MiniProfiler>().Query(q => q
                .Match(m => m
                    .Field(f => f.User)
                    .Query(user)
                ) && q
                .Match(m => m
                    .Field(f => f.HasUserViewed)
                    .Query("false")
                ));
        }

        public IEnumerable<Guid> List(int maxResults, DateTime? start = null, DateTime? finish = null, ListResultsOrder orderBy = ListResultsOrder.Descending)
        {
            var result = Db.Search<MiniProfiler>(sr => GetListQuery(maxResults, start, finish, orderBy));
            return result.Documents.Select(d => d.Id);
        }

        public async Task<IEnumerable<Guid>> ListAsync(int maxResults, DateTime? start = null, DateTime? finish = null, ListResultsOrder orderBy = ListResultsOrder.Descending)
        {
            var result = await Db.SearchAsync<MiniProfiler>(sr => GetListQuery(maxResults, start, finish, orderBy)).ConfigureAwait(false);
            return result.Documents.Select(d => d.Id);
        }

        private SearchDescriptor<MiniProfiler> GetListQuery(int maxResults, DateTime? start = null, DateTime? finish = null, ListResultsOrder orderBy = ListResultsOrder.Descending)
        {
            var query = new SearchDescriptor<MiniProfiler>();
            if (start != null && finish != null)
            {
                var startFilter = new QueryContainerDescriptor<MiniProfiler>().DateRange(r => r.Field(f => f.Started).GreaterThan(start));
                var endFilter = new QueryContainerDescriptor<MiniProfiler>().DateRange(r => r.Field(f => f.Started).LessThan(finish));
                query.Query(q => startFilter && endFilter);
            }
            else if (finish == null && start != null)
            {
                var startFilter = new QueryContainerDescriptor<MiniProfiler>().DateRange(r => r.Field(f => f.Started).GreaterThan(start));
                query.Query(q => startFilter);
            }
            var result = query.Index(miniProfilerIndex)
               .From(0)
               .Size(maxResults)
               .Sort(s =>
               {
                   if (orderBy == ListResultsOrder.Descending)
                       return s.Descending(f => f.Started);
                   else
                       return s.Ascending(f => f.Started);
               });
            return result;
        }
    }
}
